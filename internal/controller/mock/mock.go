// Code generated by MockGen. DO NOT EDIT.
// Source: external.go
//
// Generated by this command:
//
//	mockgen -source=external.go -destination=mock/mock.go
//

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	domain "github.com/walnuts1018/cloudflare-tunnel-operator/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudflareTunnelManager is a mock of CloudflareTunnelManager interface.
type MockCloudflareTunnelManager struct {
	ctrl     *gomock.Controller
	recorder *MockCloudflareTunnelManagerMockRecorder
	isgomock struct{}
}

// MockCloudflareTunnelManagerMockRecorder is the mock recorder for MockCloudflareTunnelManager.
type MockCloudflareTunnelManagerMockRecorder struct {
	mock *MockCloudflareTunnelManager
}

// NewMockCloudflareTunnelManager creates a new mock instance.
func NewMockCloudflareTunnelManager(ctrl *gomock.Controller) *MockCloudflareTunnelManager {
	mock := &MockCloudflareTunnelManager{ctrl: ctrl}
	mock.recorder = &MockCloudflareTunnelManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudflareTunnelManager) EXPECT() *MockCloudflareTunnelManagerMockRecorder {
	return m.recorder
}

// AddDNS mocks base method.
func (m *MockCloudflareTunnelManager) AddDNS(ctx context.Context, tunnelID, hostname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDNS", ctx, tunnelID, hostname)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDNS indicates an expected call of AddDNS.
func (mr *MockCloudflareTunnelManagerMockRecorder) AddDNS(ctx, tunnelID, hostname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDNS", reflect.TypeOf((*MockCloudflareTunnelManager)(nil).AddDNS), ctx, tunnelID, hostname)
}

// CreateTunnel mocks base method.
func (m *MockCloudflareTunnelManager) CreateTunnel(ctx context.Context, Name string) (domain.CloudflareTunnel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTunnel", ctx, Name)
	ret0, _ := ret[0].(domain.CloudflareTunnel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTunnel indicates an expected call of CreateTunnel.
func (mr *MockCloudflareTunnelManagerMockRecorder) CreateTunnel(ctx, Name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTunnel", reflect.TypeOf((*MockCloudflareTunnelManager)(nil).CreateTunnel), ctx, Name)
}

// DeleteAllDNS mocks base method.
func (m *MockCloudflareTunnelManager) DeleteAllDNS(ctx context.Context, tunnelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllDNS", ctx, tunnelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllDNS indicates an expected call of DeleteAllDNS.
func (mr *MockCloudflareTunnelManagerMockRecorder) DeleteAllDNS(ctx, tunnelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllDNS", reflect.TypeOf((*MockCloudflareTunnelManager)(nil).DeleteAllDNS), ctx, tunnelID)
}

// DeleteDNS mocks base method.
func (m *MockCloudflareTunnelManager) DeleteDNS(ctx context.Context, tunnelID, recordID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDNS", ctx, tunnelID, recordID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDNS indicates an expected call of DeleteDNS.
func (mr *MockCloudflareTunnelManagerMockRecorder) DeleteDNS(ctx, tunnelID, recordID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDNS", reflect.TypeOf((*MockCloudflareTunnelManager)(nil).DeleteDNS), ctx, tunnelID, recordID)
}

// DeleteTunnel mocks base method.
func (m *MockCloudflareTunnelManager) DeleteTunnel(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTunnel", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTunnel indicates an expected call of DeleteTunnel.
func (mr *MockCloudflareTunnelManagerMockRecorder) DeleteTunnel(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTunnel", reflect.TypeOf((*MockCloudflareTunnelManager)(nil).DeleteTunnel), ctx, id)
}

// GetDNS mocks base method.
func (m *MockCloudflareTunnelManager) GetDNS(ctx context.Context, tunnelID, hostname string) (domain.DNSRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNS", ctx, tunnelID, hostname)
	ret0, _ := ret[0].(domain.DNSRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNS indicates an expected call of GetDNS.
func (mr *MockCloudflareTunnelManagerMockRecorder) GetDNS(ctx, tunnelID, hostname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNS", reflect.TypeOf((*MockCloudflareTunnelManager)(nil).GetDNS), ctx, tunnelID, hostname)
}

// GetTunnel mocks base method.
func (m *MockCloudflareTunnelManager) GetTunnel(ctx context.Context, ID string) (domain.CloudflareTunnel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTunnel", ctx, ID)
	ret0, _ := ret[0].(domain.CloudflareTunnel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTunnel indicates an expected call of GetTunnel.
func (mr *MockCloudflareTunnelManagerMockRecorder) GetTunnel(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTunnel", reflect.TypeOf((*MockCloudflareTunnelManager)(nil).GetTunnel), ctx, ID)
}

// GetTunnelConfiguration mocks base method.
func (m *MockCloudflareTunnelManager) GetTunnelConfiguration(ctx context.Context, tunnelID string) (domain.TunnelConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTunnelConfiguration", ctx, tunnelID)
	ret0, _ := ret[0].(domain.TunnelConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTunnelConfiguration indicates an expected call of GetTunnelConfiguration.
func (mr *MockCloudflareTunnelManagerMockRecorder) GetTunnelConfiguration(ctx, tunnelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTunnelConfiguration", reflect.TypeOf((*MockCloudflareTunnelManager)(nil).GetTunnelConfiguration), ctx, tunnelID)
}

// GetTunnelToken mocks base method.
func (m *MockCloudflareTunnelManager) GetTunnelToken(ctx context.Context, tunnelID string) (domain.CloudflareTunnelToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTunnelToken", ctx, tunnelID)
	ret0, _ := ret[0].(domain.CloudflareTunnelToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTunnelToken indicates an expected call of GetTunnelToken.
func (mr *MockCloudflareTunnelManagerMockRecorder) GetTunnelToken(ctx, tunnelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTunnelToken", reflect.TypeOf((*MockCloudflareTunnelManager)(nil).GetTunnelToken), ctx, tunnelID)
}

// UpdateDNS mocks base method.
func (m *MockCloudflareTunnelManager) UpdateDNS(ctx context.Context, tunnelID, hostname string, current domain.DNSRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDNS", ctx, tunnelID, hostname, current)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDNS indicates an expected call of UpdateDNS.
func (mr *MockCloudflareTunnelManagerMockRecorder) UpdateDNS(ctx, tunnelID, hostname, current any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDNS", reflect.TypeOf((*MockCloudflareTunnelManager)(nil).UpdateDNS), ctx, tunnelID, hostname, current)
}

// UpdateTunnelConfiguration mocks base method.
func (m *MockCloudflareTunnelManager) UpdateTunnelConfiguration(ctx context.Context, tunnelID string, config domain.TunnelConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTunnelConfiguration", ctx, tunnelID, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTunnelConfiguration indicates an expected call of UpdateTunnelConfiguration.
func (mr *MockCloudflareTunnelManagerMockRecorder) UpdateTunnelConfiguration(ctx, tunnelID, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTunnelConfiguration", reflect.TypeOf((*MockCloudflareTunnelManager)(nil).UpdateTunnelConfiguration), ctx, tunnelID, config)
}
