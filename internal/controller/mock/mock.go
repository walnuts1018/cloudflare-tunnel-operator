// Code generated by MockGen. DO NOT EDIT.
// Source: external.go
//
// Generated by this command:
//
//	mockgen -source=external.go -destination=mock/mock.go
//

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	domain "github.com/walnuts1018/cloudflare-tunnel-operator/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudflareTunnelManager is a mock of CloudflareTunnelManager interface.
type MockCloudflareTunnelManager struct {
	ctrl     *gomock.Controller
	recorder *MockCloudflareTunnelManagerMockRecorder
	isgomock struct{}
}

// MockCloudflareTunnelManagerMockRecorder is the mock recorder for MockCloudflareTunnelManager.
type MockCloudflareTunnelManagerMockRecorder struct {
	mock *MockCloudflareTunnelManager
}

// NewMockCloudflareTunnelManager creates a new mock instance.
func NewMockCloudflareTunnelManager(ctrl *gomock.Controller) *MockCloudflareTunnelManager {
	mock := &MockCloudflareTunnelManager{ctrl: ctrl}
	mock.recorder = &MockCloudflareTunnelManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudflareTunnelManager) EXPECT() *MockCloudflareTunnelManagerMockRecorder {
	return m.recorder
}

// CreateTunnel mocks base method.
func (m *MockCloudflareTunnelManager) CreateTunnel(ctx context.Context, Name string) (domain.CloudflareTunnel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTunnel", ctx, Name)
	ret0, _ := ret[0].(domain.CloudflareTunnel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTunnel indicates an expected call of CreateTunnel.
func (mr *MockCloudflareTunnelManagerMockRecorder) CreateTunnel(ctx, Name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTunnel", reflect.TypeOf((*MockCloudflareTunnelManager)(nil).CreateTunnel), ctx, Name)
}

// DeleteTunnel mocks base method.
func (m *MockCloudflareTunnelManager) DeleteTunnel(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTunnel", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTunnel indicates an expected call of DeleteTunnel.
func (mr *MockCloudflareTunnelManagerMockRecorder) DeleteTunnel(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTunnel", reflect.TypeOf((*MockCloudflareTunnelManager)(nil).DeleteTunnel), ctx, id)
}

// GetTunnel mocks base method.
func (m *MockCloudflareTunnelManager) GetTunnel(ctx context.Context, ID string) (domain.CloudflareTunnel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTunnel", ctx, ID)
	ret0, _ := ret[0].(domain.CloudflareTunnel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTunnel indicates an expected call of GetTunnel.
func (mr *MockCloudflareTunnelManagerMockRecorder) GetTunnel(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTunnel", reflect.TypeOf((*MockCloudflareTunnelManager)(nil).GetTunnel), ctx, ID)
}

// GetTunnelToken mocks base method.
func (m *MockCloudflareTunnelManager) GetTunnelToken(ctx context.Context, tunnelId string) (domain.CloudflareTunnelToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTunnelToken", ctx, tunnelId)
	ret0, _ := ret[0].(domain.CloudflareTunnelToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTunnelToken indicates an expected call of GetTunnelToken.
func (mr *MockCloudflareTunnelManagerMockRecorder) GetTunnelToken(ctx, tunnelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTunnelToken", reflect.TypeOf((*MockCloudflareTunnelManager)(nil).GetTunnelToken), ctx, tunnelId)
}
